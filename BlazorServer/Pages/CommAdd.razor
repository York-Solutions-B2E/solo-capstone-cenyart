@page "/commadd"
@attribute [Authorize(Policy = "Admin")]
@attribute [Authorize(Policy = "User")]
@inject CommService CommService
@inject TypeService TypeService
@inject NavigationManager Nav

<h3>Add Communication</h3>

@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_model" OnValidSubmit="HandleCreate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Title</label>
            <InputText @bind-Value="_model.Title" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Type</label>
            <InputSelect @bind-Value="_model.TypeCode" class="form-select">
                <option value="">-- select --</option>
                @foreach (var t in _types)
                {
                    <option value="@t.TypeCode">@t.DisplayName</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Initial Status</label>
            <InputText @bind-Value="_model.CurrentStatusCode" class="form-control" readonly />
        </div>

        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" @onclick="GoBack">‚Üê Back</button>
            <button type="submit" class="btn btn-success" disabled="@(!IsValid)">Create</button>
        </div>
    </EditForm>
}

@code {
    private class CommAddModel
    {
        public string Title { get; set; } = "";
        public string TypeCode { get; set; } = "";
        public string CurrentStatusCode { get; set; } = "Pending";
    }

    private CommAddModel _model = new();
    private List<TypeDto> _types = new();
    private bool _loading = true;

    private bool IsValid =>
        !string.IsNullOrWhiteSpace(_model.Title) &&
        !string.IsNullOrWhiteSpace(_model.TypeCode);

    protected override async Task OnInitializedAsync()
    {
        _types = (await TypeService.GetAllTypesAsync()).ToList();
        _loading = false;
    }

    private async Task HandleCreate()
    {
        var payload = new Shared.Dtos.CreateCommPayload(
            _model.Title,
            _model.TypeCode,
            _model.CurrentStatusCode);

        await CommService.CreateCommunicationAsync(payload);
        Nav.NavigateTo("/commlist");
    }

    private void GoBack() => Nav.NavigateTo("/commlist");
}
