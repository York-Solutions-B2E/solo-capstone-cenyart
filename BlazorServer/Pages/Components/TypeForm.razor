
@namespace BlazorServer.Pages.Components

@inject TypeService TypeService
@inject StatusService StatusService

<EditForm Model="CurrentModel" OnValidSubmit="HandleValid">
  <div class="mb-3">
    <label>Type Code</label>
    <InputText @bind-Value="BoundCode"
               class="form-control"
               disabled="@(!_isNew)" />
  </div>
  <div class="mb-3">
    <label>Display Name</label>
    <InputText @bind-Value="BoundName" class="form-control" />
  </div>
  <div class="form-check mb-3">
    <InputCheckbox @bind-Value="BoundActive" class="form-check-input" />
    <label class="form-check-label">Active</label>
  </div>

  <h6>Valid Statuses</h6>
  @foreach (var s in AllStatuses)
  {
    <div class="form-check">
      <InputCheckbox @bind-Value="Checked[s.StatusCode]" class="form-check-input" />
      <label class="form-check-label">@s.StatusCode</label>
    </div>
  }

  <button class="btn btn-primary me-2">@(_isNew ? "Create" : "Save")</button>
  @if (!_isNew)
  {
    <button type="button" class="btn btn-danger me-2" @onclick="Delete">Delete</button>
  }
  <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter] public TypeCreateDto? NewType { get; set; }
    [Parameter] public TypeDetailsDto? EditType { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public EventCallback OnCanceled { get; set; }

    private bool _isNew => NewType != null;
    private TypeCreateDto _create = new("", "");
    private TypeDetailsDto _edit = default!;
    private List<StatusDto> AllStatuses = new();
    private Dictionary<string, bool> Checked = new();

    private object CurrentModel => _isNew ? (object)_create : _edit;

    private string BoundCode
    {
        get => _isNew ? _create.TypeCode : _edit.TypeCode;
        set
        {
            if (_isNew) _create = _create with { TypeCode = value };
            else         _edit   = _edit   with { TypeCode = value };
        }
    }
    private string BoundName
    {
        get => _isNew ? _create.DisplayName : _edit.DisplayName;
        set
        {
            if (_isNew) _create = _create with { DisplayName = value };
            else         _edit   = _edit   with { DisplayName = value };
        }
    }
    private bool BoundActive
    {
        get => !_isNew && _edit.IsActive;
        set
        {
            if (!_isNew) _edit = _edit with { IsActive = value };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Load statuses for this type
        var code = _isNew ? _create.TypeCode : _edit.TypeCode;
        if (!string.IsNullOrWhiteSpace(code))
            AllStatuses = await StatusService.GetByTypeAsync(code);
    }

    protected override void OnParametersSet()
    {
        if (_isNew)
            _create = NewType!;
        else
        {
            _edit = EditType!;
            Checked = AllStatuses.ToDictionary(
                s => s.StatusCode,
                s => _edit.ValidStatuses.Any(v => v.StatusCode == s.StatusCode)
            );
        }
    }

    private async Task HandleValid()
    {
        if (_isNew)
            await TypeService.CreateAsync(_create);
        else
            await TypeService.UpdateAsync(new TypeUpdateDto(_edit.TypeCode, _edit.DisplayName, _edit.IsActive));

        // Sync statuses
        foreach (var kv in Checked)
        {
            var exists = !_isNew && _edit.ValidStatuses.Any(v => v.StatusCode == kv.Key);
            if (kv.Value && !exists)
                await StatusService.AddAsync(new StatusCreateDto(_isNew ? _create.TypeCode : _edit.TypeCode, kv.Key, ""));
            else if (!kv.Value && exists)
                await StatusService.DeleteAsync(new StatusDeleteDto(
                    _edit.ValidStatuses.First(v => v.StatusCode == kv.Key).Id));
        }

        await OnSaved.InvokeAsync();
    }

    private async Task Delete()
    {
        await TypeService.DeleteAsync(new TypeDeleteDto(BoundCode));
        await OnSaved.InvokeAsync();
    }

    private Task Cancel() => OnCanceled.InvokeAsync();
}
