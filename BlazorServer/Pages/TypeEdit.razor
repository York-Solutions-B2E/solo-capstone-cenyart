@page "/typeedit/{TypeCode}"
@inject TypeService TypeService
@inject GlobalStatusService GlobalStatusService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView Roles="Admin" Context="authContext">
    <Authorized>
        <h3>Edit Communication Type</h3>

        @if (_loading)
        {
            <p><em>Loading...</em></p>
        }
        else if (_typeDetails == null)
        {
            <div class="alert alert-danger">Type not found.</div>
        }
        else
        {
            <EditForm Model="_editModel" OnValidSubmit="HandleUpdate" Context="formContext">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Type Code</label>
                    <InputText @bind-Value="_editModel.TypeCode" class="form-control" Disabled="true" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Display Name</label>
                    <InputText @bind-Value="_editModel.DisplayName" class="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Active</label>
                    @if (_typeDetails.IsActive)
                    {
                        <div><span class="badge bg-success">Active</span></div>
                    }
                    else
                    {
                        <div><span class="badge bg-secondary">Inactive</span></div>
                    }
                </div>

                <h5>Valid Statuses</h5>
                <p class="text-muted">Check which global statuses should be valid for this type. Descriptions shown below.</p>

                @if (_statusOptions?.Any() != true)
                {
                    <div class="alert alert-info">No global statuses available.</div>
                }
                else
                {
                    <div class="mb-3">
                        @foreach (var s in _statusOptions)
                        {
                            <div class="form-check">
                                <input
                                    class="form-check-input"
                                    type="checkbox"
                                    id="@($"chk_{s.StatusCode}")"
                                    checked="@(_checked.TryGetValue(s.StatusCode, out var val) && val)"
                                    @onchange="(ChangeEventArgs e) => OnCheckboxChanged(s.StatusCode, e?.Value is bool b && b)" />
                                <label class="form-check-label" for="@($"chk_{s.StatusCode}")">
                                    <strong>@s.StatusCode</strong>
                                    <div class="text-muted">@s.Notes</div>
                                </label>
                            </div>
                        }
                    </div>
                }

                <div class="d-flex justify-content-between mt-4">
                    <button type="button" class="btn btn-secondary" @onclick="GoBack">‚Üê Back</button>

                    <div>
                        <button type="button" class="btn btn-danger me-2" @onclick="HandleDelete">Delete</button>
                        <button type="submit" class="btn btn-primary" disabled="@(!CanUpdate)">Update</button>
                    </div>
                </div>
            </EditForm>
        }
    </Authorized>

    <NotAuthorized>
        <div class="alert alert-danger mt-3">
            You are not authorized to view this page. Admins only.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public string TypeCode { get; set; } = "";

    private TypeDetailsDto? _typeDetails;
    private bool _loading = true;

    private class EditModel
    {
        public string TypeCode { get; set; } = "";
        public string DisplayName { get; set; } = "";
    }

    private EditModel _editModel = new();
    private List<GlobalStatusDto> _statusOptions = new();
    private Dictionary<string, bool> _checked = new();
    private Dictionary<string, StatusDto> _originalMap = new();

    private bool CanUpdate =>
        !string.IsNullOrWhiteSpace(_editModel.DisplayName) &&
        !string.IsNullOrWhiteSpace(_editModel.TypeCode);

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true && user.IsInRole("Admin"))
        {
            await LoadTypeAsync();
        }
    }

    private async Task LoadTypeAsync()
    {
        _loading = true;

        try
        {
            _typeDetails = await TypeService.GetTypeByCodeAsync(TypeCode);
            if (_typeDetails == null)
            {
                _loading = false;
                return;
            }

            _editModel = new EditModel
            {
                TypeCode = _typeDetails.TypeCode,
                DisplayName = _typeDetails.DisplayName
            };

            _statusOptions = await GlobalStatusService.GetAllGlobalStatusesAsync();

            _originalMap = _typeDetails.ValidStatuses.ToDictionary(s => s.StatusCode, s => s);
            _checked = _statusOptions.ToDictionary(
                s => s.StatusCode,
                s => _originalMap.ContainsKey(s.StatusCode)
            );
        }
        catch
        {
            _typeDetails = null;
        }

        _loading = false;
        StateHasChanged();
    }

    private void OnCheckboxChanged(string statusCode, bool isChecked)
    {
        _checked[statusCode] = isChecked;
    }

    private async Task HandleUpdate()
    {
        if (_typeDetails == null) return;

        var allowed = _checked
            .Where(kv => kv.Value)
            .Select(kv => kv.Key)
            .ToList();

        var updatePayload = new UpdateTypePayload(
            _editModel.TypeCode,
            _editModel.DisplayName,
            allowed
        );

        await TypeService.UpdateTypeAsync(updatePayload);

        Nav.NavigateTo("/typelist");
    }

    private async Task HandleDelete()
    {
        if (_typeDetails == null) return;

        var deletePayload = new DeleteTypePayload(_typeDetails.TypeCode);
        await TypeService.SoftDeleteTypeAsync(deletePayload);

        Nav.NavigateTo("/typelist");
    }

    private void GoBack() => Nav.NavigateTo("/typelist");
}
