@page "/debug-api"
@using Microsoft.AspNetCore.Authentication
@inject IHttpContextAccessor HttpContextAccessor
@inject CommService CommService


<h3>API Debug</h3>

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="alert alert-success">✅ Blazor AuthorizeView works - you have Admin role</div>
        
        <button class="btn btn-primary" @onclick="TestApiCall">Test API Call</button>
        
        @if (!string.IsNullOrEmpty(apiResult))
        {
            <div class="mt-3">
                <h5>API Result:</h5>
                <div class="alert @(apiSuccess ? "alert-success" : "alert-danger")">
                    @apiResult
                </div>
            </div>
        }

        <hr />
        
        <h5>Token Information:</h5>
        <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
            <div><strong>Access Token Available:</strong> @(!string.IsNullOrEmpty(accessToken) ? "Yes" : "No")</div>
            @if (!string.IsNullOrEmpty(accessToken))
            {
                <div><strong>Access Token (first 100 chars):</strong></div>
                <div style="font-family: monospace; background: #fff; padding: 10px; border: 1px solid #ddd;">
                    @(accessToken.Length > 100 ? accessToken.Substring(0, 100) + "..." : accessToken)
                </div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger">❌ You need Admin role to access this page</div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string apiResult = "";
    private bool apiSuccess = false;
    private string accessToken = "";

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            var authResult = await httpContext.AuthenticateAsync();
            accessToken = authResult?.Properties?.GetTokenValue("access_token") ?? "";
        }
    }

    private async Task TestApiCall()
    {
        try
        {
            // Replace this with whatever method CommService uses
            // For example, if CommService has a GetComms() method:
            var result = await CommService.GetCommunicationsAsync(1, 10); // Adjust this based on your actual CommService methods
            
            apiResult = $"✅ API call successful! Returned {result?.TotalCount ?? 0} items";
            apiSuccess = true;
        }
        catch (HttpRequestException ex) when (ex.Message.Contains("403"))
        {
            apiResult = $"❌ 403 Forbidden: {ex.Message}";
            apiSuccess = false;
        }
        catch (Exception ex)
        {
            apiResult = $"❌ Error: {ex.Message}";
            apiSuccess = false;
        }
    }
}